package bufmgr;

import global.GlobalConst;
import global.PageId;
import global.SystemDefs;

import java.io.IOException;

import chainexception.ChainException;
import diskmgr.DiskMgrException;
import diskmgr.FileIOException;
import diskmgr.InvalidPageNumberException;
import diskmgr.InvalidRunSizeException;
import diskmgr.OutOfSpaceException;
import diskmgr.Page;

public class BufMgr {
	private byte[][] bufpool;
	private int bufsize;
	private int used; // TODO Number of frames that contain unpinned pages +
	// empty frames (if any) ............and check in
	// pinPage() ......change as it may be freed from the
	// middle
	private BufDescr[] bufDescr;

	private HashTable<PageId, Integer> hash;
	private PlacementPolicy placement_policy;

	// bufPool[Pool_size][Page_Size] page size can be found in the GobalConstant
	// Class

	public BufMgr(int numbufs, String replacementArg)
	{
		bufsize = numbufs;
		used = 0;

		placement_policy = new PlacementPolicy();
		bufpool = new byte[bufsize][GlobalConst.MINIBASE_PAGESIZE];
		bufDescr = new BufDescr[bufsize];
		hash = new HashTable<PageId, Integer>(bufsize);
	}

	// Don't remove from hash
	public void unpinPage(PageId PageID_in_a_DB, boolean dirty)
			throws ChainException
	{
		Integer index = hash.get(PageID_in_a_DB);
		
		if (index == null)// Checking valid pageId
			throw new HashEntryNotFoundException();

		if (0 == bufDescr[index].getPinCount())
			throw new PageUnpinnedException();
		boolean isZero = bufDescr[index].decreamentPinCount();
		if (isZero)
			placement_policy.addFrame(index);
	}

	/**
	 * Pin a page. First check if this page is already in the buffer pool. If it
	 * is, increment the pin_count and return a pointer to this page. If the
	 * pin_count was 0 before the call, the page was a replacement candidate,
	 * but is no longer a candidate. If the page is not in the pool, choose a
	 * frame (from the set of replacement candidates) to hold this page, read
	 * the page (using the appropriate method from {\em diskmgr} package) and
	 * pin it. Also, must write out the old page in chosen frame if it is dirty
	 * before reading new page. (You can assume that emptyPage==false for this
	 * assignment.)
	 * 
	 * @param Page_Id_in_a_DB
	 *            page number in the minibase.
	 * @param page
	 *            the pointer poit to the page.
	 * @param emptyPage
	 *            true (empty page); false (non-empty page)
	 */
	public void pinPage(PageId pin_pgid, Page page, boolean empty)
			throws ChainException
	{
		// check in the bufpool or not , Checking null is faster way
		Integer index = hash.get(pin_pgid);
		if (index != null)
		{
			// pincount++
			boolean wasZero = bufDescr[index].increamentPinCount();

			// remove from queue
			if (wasZero)
				placement_policy.removeCandidate(index);
		} else
		{
			// TODO USED Change this
			int insertPos;
			if (used < bufsize)
			{
				// Buffer have empty frames
				insertPos = used++;
			} else
			{
				// buffer in full but will check pages with 0 pin_count
				insertPos = placement_policy.getFrame();

				// Free old page from frame , because it may be dirty and have
				// to be written to disk
				freePage(bufDescr[insertPos].getId());
			}

			try
			{
				SystemDefs.JavabaseDB.read_page(pin_pgid, page);
			} catch (IOException e)
			{
				throw new ChainException(e, "DB.java: read_page() failed");
			}

			// put page in bufpool
			bufpool[insertPos] = page.getpage();
			bufDescr[insertPos] = new BufDescr(pin_pgid, 1);
			hash.put(pin_pgid, insertPos);
		}

	}

	public PageId newPage(Page firstpage, int howmany)
			throws OutOfSpaceException, InvalidRunSizeException,
			InvalidPageNumberException, FileIOException, DiskMgrException,
			IOException
	{
		// Some Notes :
		// this method calls DB allocate page , the DB allocate page calls
		// pinPage to read it and then calls unPin() to set the count to 0
		// so We should increment pin_count
		PageId pid = new PageId();
		SystemDefs.JavabaseDB.allocate_page(pid, howmany);

		// Check whether it was inserted in the hash or not
		Integer index = hash.get(pid);
		if (index != null)
		{
			firstpage.setpage(bufpool[index]);
			return pid;
		}
		// NO empty frame was found will deallocate them form DB and return null
		SystemDefs.JavabaseDB.deallocate_page(pid, howmany);
		return null;
	}

	// TODO invalid id and decrement used
	public void freePage(PageId globalPageId) throws ChainException
	{
		Integer index = hash.get(globalPageId);
		hash.remove(globalPageId);
		if (index != null)
			placement_policy.addFrame(index);
		else
			throw new HashEntryNotFoundException();
		try
		{
			SystemDefs.JavabaseDB.deallocate_page(globalPageId);
		} catch (IOException e)
		{
			throw new ChainException(e, "DB.java: deallocate_page() failed");
		}

	}

	// TODO check invalid id Throw HashEntryNotFoundException DONE DONE DONE
	// throw Exception??? invalid pageid??
	public void flushPage(PageId pageid) throws ChainException
	{
		Integer index = hash.get(pageid);
		if (index != null)
		{
			if (bufDescr[index].isDirtyBit())
				try
				{
					SystemDefs.JavabaseDB.write_page(pageid, new Page(
							bufpool[index]));
				} catch (Exception e)
				{
					throw new ChainException(e, "DB.java: write_page() failed");
				}
		} else
			throw new HashEntryNotFoundException();
	}

	public int getNumUnpinnedBuffers()
	{
		return placement_policy.getNumCandidates() + bufsize - used;
	}

	public void flushAllPages()
	{
		// TODO I don't know but will implement it later
	}
}
