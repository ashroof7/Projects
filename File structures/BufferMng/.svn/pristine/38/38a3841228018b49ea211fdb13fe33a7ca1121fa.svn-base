package bufmgr;

import java.io.IOException;

import global.GlobalConst;
import global.PageId;
import global.SystemDefs;
import chainexception.ChainException;
import diskmgr.DiskMgrException;
import diskmgr.FileIOException;
import diskmgr.InvalidPageNumberException;
import diskmgr.InvalidRunSizeException;
import diskmgr.OutOfSpaceException;
import diskmgr.Page;

public class BufMgr {
	private byte[][] bufpool;
	private BufDescr[] bufDescr;
	private HashTable<PageId, Integer> hash;
	private PlacementPolicy placement_policy;
	private int used;

	// bufPool[Pool_size][Page_Size] page size can be found in the GobalConstant
	// Class
	public BufMgr(int numbufs, String replacementArg)
	{
		placement_policy = new PlacementPolicy(replacementArg);
		bufpool = new byte[numbufs][GlobalConst.MINIBASE_PAGESIZE];
	}

	// This method should use DB write file and read_page ONLY to run system 
	// logic works as it's supposed to run
	public void pinPage(PageId pin_pgid, Page page, boolean empty)
			throws ChainException
	{
	}

	// Don't remove from hash
	public void unpinPage(PageId PageID_in_a_DB, boolean dirty)
			throws ChainException
	{
	}
	
	
	
	public PageId newPage(Page firstpage, int howmany) throws OutOfSpaceException, InvalidRunSizeException, InvalidPageNumberException, FileIOException, DiskMgrException, IOException{
		// Some Notes :
		// this method calls DB allocate page  , the DB allocate page calls
		// pinPage to read it and then calls unPin() to set the count to 0
		// so We should increment pin_count
		PageId pid = new PageId();
		SystemDefs.JavabaseDB.allocate_page(pid, howmany);
		
		// Check whether it was inserted in the hash or not
		Integer index = hash.get(pid);
		if(index != null)
		{
			firstpage.setpage(bufpool[index]);
			return pid;
		}
		// NO empty frame was found will deallocate them form DB and return null
		SystemDefs.JavabaseDB.deallocate_page(pid, howmany);
		return null;
	}

	public void freePage(PageId globalPageId) throws ChainException
	{
	}

	public void flushPage(PageId pageid)
	{
	}

	public int getNumUnpinnedBuffers()
	{
		return 0;
	} // TODO ?????? get more info
}
